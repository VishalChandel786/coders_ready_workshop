# -*- coding: utf-8 -*-
"""WS DAY 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lI2JtcZAxAB5or0055YxYiyfcKxKINrW
"""

print(type(1))#integer (1,2,3....)
print(type([]))#list data type
print(type(()))#tuple every value is in quotes('gopal','krishan')
print(type({}))#for dictionary (blue part describes nature    )

class sample:
   pass
x = sample() #(instance value)
print(type(x))

class Dog:
  def __init__(self,breed):#argument or attribute ko initialise krne ke liye init method use kiya
    self.breed = breed 

sam = Dog(breed = 'Lab')
frank = Dog(breed = 'Huskie')

sam.breed

frank.breed

class circle:
  pi = 3.14
  def __init__(self,radius = 1):#argument ko initialise krwane ke liye
    self.radius = radius
    self.area = radius*radius *circle.pi

  def setradius(self, new_radius):#to reset radius we use set method
    self.radius = new_radius
    self.area = new_radius *new_radius*self.pi 

  def getcircumference(self):#to get circumference
    return self.radius * self.pi *2

c = circle()

print( 'Radius is : ' , c.radius)

print('Area is : ', c.area)

print('Circumference is: ',c.getcircumference())

c.setradius(2)
print('Radius is =  ', c.radius)
print('Area is =  ', c.area)
print('Circumference is:  ', c.getcircumference)

from inspect import CO_OPTIMIZED
class track:
  def __init__(self , coor1,coor2):
    self.coor1 = coor1
    self.coor2 = coor2

  def distance(self):
       x1,y1 = self.coor1
       x2,y2 = self.coor2
       return ((x2-x1) ** 2-(y2-y1)**2)**0.5

  def slope(self):
      x1,y1 = self.coor1
      x2,y2 = self.coor2
      return(y2-y1)/(x2-x1)

c1 = (4,9)
c2 = (9,12)

find = track(c1,c2)

find.distance()

find.slope()

class Account:
  def __init__(self,owner,balance = 0):
      self.owner = owner
      self.balance = balance
  def __str__(self):
      return f'Account owner:  (self.owner)' 'Account balance: {self,balance}'

  def deposit(self,dep_amt):
      self.balance += dep_amt
      print("Deposit Accepted")
  

  def withdraw(self,wd_amt):
      if self.balance >= wd_amt:
        self.balance -= wd_amt
        print('Withdrawal Accepted')


      else:
        print('Fund Unavailble')

acc1 = Account('Hitesh', 20000)

acc1.owner

acc1.deposit(100)

acc1.balance

acc1.withdraw(30000)

acc1.withdraw(18000)

acc1.balance